{"version":3,"sources":["authentication/AuthContext.js","utilities/PrivateRoute.js","images/index.js","images/casterly_rock.jpg","images/eastwatch.jpeg","images/highgarden.jpg","images/iron_islands.jpg","images/iron_throne.jpg","images/kings_landing.jpg","images/nights_watch.jpg","images/oldtown.jpg","images/riverrun.jpg","images/winterfell.jpg","elements/Elements/index.js","elements/Buttons/Button.js","elements/Buttons/CommentButton.js","utilities/gqlTags.js","elements/Buttons/DeleteButtons.js","elements/Buttons/LikeButtons.js","elements/Buttons/Tabs.js","elements/Buttons/DislikeButtons.js","elements/Buttons/FollowButton.js","images/default.jpg","elements/Cards/UserCard.js","elements/Cards/PostCard.js","elements/Cards/CommentCard.js","elements/Forms/ImageInputForm.js","elements/Forms/PostCardForm.js","elements/Forms/SearchForm.js","elements/Forms/SignForm.js","elements/Forms/CommentCardForm.js","components/HomePage/MainView/HeaderView/HeaderView.js","utilities/useForm.js","components/HomePage/MainView/PostsView/PostsView.js","components/HomePage/MainView/UsersView/UsersView.js","components/HomePage/MainView/MainView.js","utilities/getRandomList.js","components/HomePage/SuggestView/SuggestView.js","components/HomePage/SideView/Options.js","components/HomePage/SideView/UserPreview.js","components/HomePage/SideView/LogInPreview.js","components/HomePage/SideView/SideView.js","components/HomePage/LeftSideView.js","pages/HomePage/HomePage.js","components/ProfilePage/TabDetails/TabDetails.js","components/ProfilePage/ProfileTabs/ProfileTabs.js","images/defaultBG.jpg","components/ProfilePage/ProfileTopView/ProfileTopView.js","components/ProfilePage/ProfileMainDetails/ProfileMainDetails.js","components/ProfilePage/ProfileSideDetails/ProfileSideDetails.js","utilities/uploadImage.js","components/ProfilePage/EditProfile/EditProfile.js","pages/ProfilePage/ProfilePage.js","components/AuthPage/FormView.js","pages/AuthPage/RegisterPage.js","pages/AuthPage/LoginPage.js","components/PostPage/PostMainView.js","pages/PostPage/PostPage.js","App.js","authentication/ApolloProvider.js","index.js"],"names":["initialState","data","token","localStorage","getItem","jwtDecode","exp","Date","now","removeItem","JSON","parse","AuthContext","createContext","login","logout","authReducer","state","action","type","user","AuthProvider","children","useReducer","dispatch","Provider","value","loginOrRegister","userData","setItem","stringify","PrivateRoute","Component","component","rest","useContext","render","props","to","CasterlyRock","EastWatch","HighGarden","IronIslands","IronThrone","KingsLanding","NightsWatch","OldTown","RiverRun","WinterFell","AppDetails","className","ErrorDetails","errors","Object","values","map","error","WestrosArtImage","src","index","Math","floor","random","WESTOROS_ART","selectRandomImage","alt","Button","buttonHandler","text","isLoading","includes","onClick","disabled","CommentPostButton","post","isCommented","history","useHistory","push","id","commentCount","GET_USERS_QUERY","gql","LIKE_POST_MUTATION","DISLIKE_POST_MUTATION","FOLLOW_USER_MUTATION","LOGIN_USER_MUTATION","GET_POSTS_QUERY","GET_POST_QUERY","REGISTER_USER_MUTATION","UPLOAD_POST_MUTATION","DELETE_POST_MUTATION","GET_USER_MUTATION","GET_USER_POSTS_QUERY","GET_USER_LIKED_POSTS_QUERY","UPDATE_USER_INFO_MUTATION","CREATE_COMMENT_MUTATION","DELETE_COMMENT_MUTATION","LIKE_COMMENT_MUTATION","DISLIKE_COMMENT_MUTATION","DELETE_USER_MUTATION","GET_FOLLOWING_POSTS_QUERY","DeletePostButton","useMutation","update","window","location","reload","deletePost","variables","postId","LikePostButton","useState","isLiked","setLiked","useEffect","flag","likes","some","l","username","dislikes","likePost","likeCount","LikeCommentButton","comment","d","likeComment","commentId","HomeHeaderTab","iconCurrenlyClicked","thisIcon","iconClickHandler","faIconClass","ProfileTab","tabClicked","tabHandler","iconName","DislikePostButton","isDisliked","setDisliked","dislikePost","dislikeCount","DislikeCommentButton","dislikeComment","FollowButton","isFollowing","setFollowing","following","f","_","resultUserData","followClicked","updatedUser","userId","followUser","handleFollowClicked","UserCard","followButton","isCurrentUser","userBio","bio","profileImageURL","defaultUserPic","name","href","houseName","UserCardList","cards","currentUser","PostCard","e","target","classList","userInfo","moment","createdAt","fromNow","body","imageURL","comments","c","CommentCard","commentClicked","optionsClickedHandler","deleteClicked","CommentCardList","setCommentClicked","deleteComment","ImageInputForm","title","property","onChangeHandler","htmlFor","length","onChange","accept","PostCardForm","onSubmitHandler","resetValues","placeholder","SearchForm","searchText","searchInputHandler","tabType","searchType","spellCheck","SignForm","textValue","inputHandler","isPassword","CommentCardForm","HeaderView","iconClicked","highlighterType","useForm","callback","setValues","files","preventDefault","PostsView","followingPosts","posts","isFollowingPostsEmpty","uploadImage","uploadPost","FormData","append","fetch","method","then","res","json","url","catch","console","log","UsersView","users","MainView","setIconClicked","setSearchText","useQuery","loading","getPosts","loading2","getFollowingPosts","filterUsers","filter","u","RegExp","match","filterFollowingPosts","filterPosts","p","tabText","currentTarget","textContent","toLowerCase","getRandomList","array","max","randomItems","n","selectedUser","SuggestView","topRightHeader","updatedUsers","randomUsers","getUserSuggestions","getWesterlings","Options","isOptionClicked","setOptionClicked","style","display","UserPreview","setIsSideViewPressed","isBannermenClicked","setIsBannermenClicked","followers","followerList","followingList","followingCount","followerCount","LogInPreview","setErrors","loginUser","password","onError","err","graphQLErrors","errorsObject","extensions","exception","SideView","LeftSideView","isSideViewPressed","HomePage","getUsers","TabDetails","userPosts","likedPosts","ProfileTabs","ProfileTopView","bannerURL","defaultBG","format","ProfileMainDetails","setTabClicked","getUserPosts","getUserLikedPosts","ProfileSideDetails","onClickEdit","email","dataURL","EditProfile","editProfile","isDeleteClicked","setDeleteClicked","uploadChanges","updatedUserData","updateProfileDetails","deleteUser","a","updatedValues","profileURL","ProfilePage","params","setEditProfile","getThisUser","getUser","FormView","authenticateUser","confirmPassword","register","errorsDisplay","loginView","registerView","inputname","RegisterView","LoginPage","PostMainView","createComment","getPost","PostPage","App","exact","path","RegisterPage","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.69364b34.chunk.js","sourcesContent":["import { useReducer, createContext } from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst initialState = {\n    data: null\n}\n\n// if user is logged in AND (user around for < 1h) THEN token is VALID\nconst token = localStorage.getItem(\"jwtToken\");\nif (token) {\n    const decodedToken = jwtDecode(token);\n    if (decodedToken.exp * 1000 < Date.now()) {\n        localStorage.removeItem(\"jwtToken\");\n        localStorage.removeItem(\"userData\");\n    } else {\n        // token is not decoded to initalize user data because...\n        // in the BackEnd, the token only takes in the user's id, name, username, email, so userData is not complete\n        // thus, when login, all fields of user are fetched and stored, not just token\n        initialState.data = JSON.parse(localStorage.getItem(\"userData\"));\n    }\n}\n\nconst AuthContext = createContext({\n    data: null,\n    login: () => { },\n    logout: () => { }\n})\n\n// refucer function, takes in a dispatched action & modifies state using it\nfunction authReducer(state, action) {\n    switch (action.type) {\n        case 'LOGIN':\n            return {\n                ...state,\n                data: action.data\n            };\n        case 'LOGOUT':\n            return {\n                ...state,\n                user: null\n            };\n        default:\n            return state;\n    }\n}\n\n// Provides context (data & functions) all throughout the App Heiarchy\nfunction AuthProvider({ children }) {\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    // this function is used everytime a user logs in or registers AND..\n    // ...currentUserData needs to be updated\n    // ...ex. current user just followed someone, so update current user's following prop\n    function loginOrRegister(userData) {\n        if (userData.token) {\n            localStorage.setItem(\"jwtToken\", userData.token);\n        }\n        localStorage.setItem(\"userData\", JSON.stringify(userData));\n        dispatch({\n            type: 'LOGIN',\n            data: userData\n        });\n    }\n\n    function logout() {\n        localStorage.removeItem(\"jwtToken\");\n        localStorage.removeItem(\"userData\");\n\n        dispatch({\n            type: 'LOGOUT'\n        });\n    }\n\n    return (\n        <AuthContext.Provider value={{\n            user: state.user,\n            data: state.data,\n            loginOrRegister,\n            logout\n        }}\n        >\n            {children}\n        </AuthContext.Provider>\n    )\n}\n\nexport { AuthProvider, AuthContext }","import React, { useContext } from 'react'\nimport { Route, Redirect } from 'react-router-dom'\n\nimport { AuthContext } from '../authentication/AuthContext'\n\n// prevents users from entering the Login and Register pages when logged in\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n    const { data: user } = useContext(AuthContext);\n\n    return (\n        <Route\n            {...rest}\n            render={(props) => {\n                return user ? <Redirect to=\"/\" /> : <Component {...props} />;\n            }}\n        >\n        </Route>\n    )\n}\n\nexport default PrivateRoute\n","import CasterlyRock from './casterly_rock.jpg';\nimport EastWatch from './eastwatch.jpeg';\nimport HighGarden from './highgarden.jpg';\nimport IronIslands from './iron_islands.jpg';\nimport IronThrone from './iron_throne.jpg';\nimport KingsLanding from './kings_landing.jpg';\nimport NightsWatch from './nights_watch.jpg';\nimport OldTown from './oldtown.jpg';\nimport RiverRun from './riverrun.jpg';\nimport WinterFell from './winterfell.jpg';\n\n\nexport default {\n    CasterlyRock,\n    EastWatch,\n    HighGarden,\n    IronIslands,\n    IronThrone,\n    KingsLanding,\n    NightsWatch,\n    OldTown,\n    RiverRun,\n    WinterFell,\n}","export default __webpack_public_path__ + \"static/media/casterly_rock.6b6d5113.jpg\";","export default __webpack_public_path__ + \"static/media/eastwatch.f4dc6960.jpeg\";","export default __webpack_public_path__ + \"static/media/highgarden.bd964fa4.jpg\";","export default __webpack_public_path__ + \"static/media/iron_islands.bcbca871.jpg\";","export default __webpack_public_path__ + \"static/media/iron_throne.f1695aac.jpg\";","export default __webpack_public_path__ + \"static/media/kings_landing.c8f50ccf.jpg\";","export default __webpack_public_path__ + \"static/media/nights_watch.9badccf6.jpg\";","export default __webpack_public_path__ + \"static/media/oldtown.24034804.jpg\";","export default __webpack_public_path__ + \"static/media/riverrun.7814c49e.jpg\";","export default __webpack_public_path__ + \"static/media/winterfell.227f94c5.jpg\";","import React from 'react'\nimport WESTOROS_ART from '../../images'\n\n// Different misc. components used throughout the app\n\nexport const AppDetails = ({ type }) => {\n    return (\n        <div className={`app-details ${type}`}>\n            This is a twitter-esque, GOT-inspired social media app made and designed just for fun by Kyle Arcilla.\n            Made using ReactJS, HTML, CSS, Express, Node, MongoDB, GQL, and Cloudinary.\n        </div>\n    )\n}\n\n// UserInputErrors for the Register and Login Pages\nexport const ErrorDetails = ({ type, errors = {} }) => {\n    return (\n        <div className={`error-details ${type}`} >\n            <ul>\n                {\n                    Object.values(errors).map((error) => (\n                        <li className={`list-error-item ${type}`} key={error}> {error} </li>\n                    ))\n                }\n            </ul>\n        </div>\n    )\n}\n\n// Randomized Westoros Art for the Login/Register Pages\nexport const WestrosArtImage = () => {\n    const selectRandomImage = () => {\n        const index = Math.floor(Math.random() * 10);\n        return Object.values(WESTOROS_ART)[index];\n    }\n\n    return (\n        <>\n            <div className=\"sign-in-up-img-container\">\n                <img src={selectRandomImage()} alt=\"sign-in-up-img-container\" />\n            </div>\n        </>\n    )\n}\n","import React from 'react'\n\n// all-purpose button (ex. submitting Register Fields...)\nexport const Button = ({ buttonHandler, text, type = \"\" }) => {\n    const isLoading = type.includes(\"loading\");\n    return (\n        <div>\n            <button onClick={buttonHandler} disabled={isLoading}\n                className={`button ${type} ${isLoading ? \"loading\" : \"\"}`\n                }>\n                {text}\n            </button>\n        </div>\n    )\n}","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport '../../components/HomePage/MainView/PostsView/PostsView.css';\n\n// the scroll icon for post cards\nexport const CommentPostButton = ({ user, post, isCommented }) => {\n    const history = useHistory();\n    const commentHandler = () => {\n        if (!user) { history.push(\"/login\"); return; }\n        history.push(`/posts/${post.id}`);\n    }\n    return (\n        <>\n            <i onClick={commentHandler} className={`fas fa-scroll metric-icon ${isCommented}`}></i>\n            <span className={`post-metric-text comment`}> {post.commentCount} </span>\n        </>\n    )\n}","import { gql } from '@apollo/client'\n// gql mutations and queries used throughout the app\n\nexport const GET_USERS_QUERY = gql`\n  query getUsers {\n        getUsers {\n        id\n        name\n        username\n        houseName\n        profileImageURL\n        bio\n        followers {\n           username\n        }\n        following {\n           username\n        }\n    }\n}\n`\nexport const LIKE_POST_MUTATION = gql`\n   mutation likePost ($postId: ID!) {\n     likePost (postId: $postId) {\n        id\n        likes {\n           username\n        }\n        dislikes {\n           username\n        }\n        likeCount\n        dislikeCount\n     }\n   }\n`\nexport const DISLIKE_POST_MUTATION = gql`\n   mutation dislikePost ($postId: ID!) {\n     dislikePost (postId: $postId) {\n        id\n        likes {\n           username\n        }\n        dislikes {\n           username\n        }\n        likeCount\n        dislikeCount\n       }\n   }\n`\nexport const FOLLOW_USER_MUTATION = gql`\n   mutation followClicked ($userId: ID!) {\n      followClicked (userId: $userId) {\n         profileImageURL\n         following {\n            id\n            profileImageURL\n            name\n            username\n            houseName\n         }\n         followers  {\n            id\n            profileImageURL\n            name\n            username\n            houseName\n         }\n         followerCount\n         followingCount\n       }\n   }\n`\nexport const LOGIN_USER_MUTATION = gql`\n    mutation login ($username: String! $password: String!) {\n      login (username: $username password: $password) {\n         id\n         profileImageURL\n         email\n         token\n         name\n         username\n         createdAt\n         houseName\n         location\n         bio\n         bannerURL\n         following {\n            id\n            name\n            username\n            houseName\n            profileImageURL\n         }\n         followers {\n            id\n            name\n            username\n            houseName\n            profileImageURL\n         }\n         followerCount\n         followingCount\n      }\n    }\n`\nexport const GET_POSTS_QUERY = gql`\n   query getPosts {\n     getPosts {\n      id\n      userInfo {\n        userId\n        name\n        username\n        houseName\n        profileImageURL\n      }\n      body\n      imageURL\n      createdAt\n      likes {\n          username\n      }\n      dislikes {\n         username\n      }\n      comments {\n         userInfo {\n            username\n         }\n      }\n      likeCount\n      dislikeCount\n      commentCount\n   }\n}\n`\nexport const GET_POST_QUERY = gql`\nquery getPost($postId: ID!) {\n  getPost(postId: $postId) {\n    id\n    userInfo {\n      userId\n      name\n      username\n      houseName\n      profileImageURL\n    }\n    body\n    imageURL\n    createdAt\n    likes {\n      username\n    }\n    dislikes {\n      username\n    }\n    comments {\n      id\n      userInfo {\n        userId\n        name\n        username\n        profileImageURL\n        houseName\n      }\n      createdAt\n      body\n      likes {\n        username\n      }\n      dislikes {\n        username\n      }\n      likeCount\n      dislikeCount\n    }\n    likeCount\n    dislikeCount\n    commentCount\n  }\n}\n`\nexport const REGISTER_USER_MUTATION = gql`\nmutation register (\n    $name: String!\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n) {\n  register (\n      registerInput: {\n         name: $name\n         username: $username\n         email: $email\n         password: $password\n         confirmPassword: $confirmPassword\n      }\n   ) {\n     id\n     profileImageURL\n     email\n     token\n     name\n     username\n     location\n     createdAt\n     bio\n     bannerURL\n     following {\n       id\n       name\n       username\n       houseName\n       profileImageURL\n     }\n     followers {\n      id\n      name\n      username\n      houseName\n      profileImageURL\n     }\n     followerCount\n     followingCount\n  }\n}\n`\nexport const UPLOAD_POST_MUTATION = gql`\nmutation createPost ( $body: String! $imageURL: String) {\n  createPost (body: $body imageURL: $imageURL ) {\n   id\n    userInfo {\n      userId\n      name\n      username\n      houseName\n      profileImageURL\n    }\n    body\n    imageURL\n    createdAt\n    likes {\n      username\n    }\n    dislikes {\n      username\n    }\n    comments {\n      id\n      userInfo {\n        userId\n        name\n        username\n        profileImageURL\n        houseName\n      }\n      createdAt\n      body\n      likes {\n        username\n      }\n      dislikes {\n        username\n      }\n      likeCount\n      dislikeCount\n    }\n    likeCount\n    dislikeCount\n    commentCount\n  }\n}\n`\nexport const DELETE_POST_MUTATION = gql`\n    mutation deletePost ($postId: ID!) {\n       deletePost (postId: $postId) \n    }\n`\nexport const GET_USER_MUTATION = gql`\n   mutation getUser($userId: ID!) {\n      getUser(userId: $userId) {\n         id\n         profileImageURL\n         email\n         name\n         houseName\n         location\n         username\n         createdAt\n         bio\n         bannerURL\n         following {\n            id\n            name\n            username\n            houseName\n            profileImageURL\n            bio\n         }\n         followers {\n            id\n            name\n            username\n            houseName\n            profileImageURL\n            bio\n         }\n         followerCount\n         followingCount\n     }\n}\n`\nexport const GET_USER_POSTS_QUERY = gql`\n    query getUserPosts ($userId: ID!) {\n      getUserPosts (userId: $userId) {\n         id\n         userInfo {\n         userId\n         name\n         username\n         houseName\n         profileImageURL\n         }\n         body\n         imageURL\n         createdAt\n         likes {\n            username\n         }\n         dislikes {\n            username\n         }\n         comments {\n            userInfo {\n               username\n            }\n         }\n         likeCount\n         dislikeCount\n         commentCount\n         }\n    }\n`\nexport const GET_USER_LIKED_POSTS_QUERY = gql`\n    query getUserLikedPosts ($userId: ID!) {\n      getUserLikedPosts (userId: $userId) {\n         id\n         userInfo {\n         userId\n         name\n         username\n         houseName\n         profileImageURL\n         }\n         body\n         imageURL\n         createdAt\n         likes {\n            username\n         }\n         dislikes {\n            username\n         }\n         comments {\n            userInfo {\n               username\n            }\n         }\n         likeCount\n         dislikeCount\n         commentCount\n         }\n    }\n`\nexport const UPDATE_USER_INFO_MUTATION = gql`\n    mutation updateProfileDetails (\n      $houseName: String\n      $location: String\n      $bio: String\n      $profileImageURL: String\n      $bannerURL: String\n    ) {\n      updateProfileDetails (\n         editProfileInput: {\n            houseName: $houseName\n            location: $location\n            bio: $bio\n            profileImageURL: $profileImageURL\n            bannerURL: $bannerURL\n         }\n      ) {\n         id\n         profileImageURL\n         email\n         name\n         houseName\n         location\n         username\n         createdAt\n         bio\n         bannerURL\n         following {\n            id\n            name\n            username\n            houseName\n            profileImageURL\n            bio\n         }\n         followers {\n            id\n            name\n            username\n            houseName\n            profileImageURL\n            bio\n         }\n         followerCount\n         followingCount\n      }\n    }\n`\nexport const CREATE_COMMENT_MUTATION = gql`\n    mutation createComment($postId: ID!, $body: String!) {\n       createComment(postId: $postId, body: $body) {\n         id\n    comments {\n      id\n      userInfo {\n        userId\n        name\n        username\n        profileImageURL\n      }\n      createdAt\n      body\n      likes {\n        username\n      }\n      dislikes {\n        username\n      }\n      likeCount\n      dislikeCount\n    }\n    commentCount\n       }\n    }\n`\nexport const DELETE_COMMENT_MUTATION = gql`\n    mutation deleteComment($postId: ID!, $commentId: ID!) {\n       deleteComment(postId: $postId, commentId: $commentId) {\n         id\n         comments {\n         id\n         userInfo {\n            userId\n            name\n            username\n            profileImageURL\n         }\n         createdAt\n         body\n         likes {\n            username\n         }\n         dislikes {\n            username\n         }\n         likeCount\n         dislikeCount\n         }\n         commentCount\n       }\n    }\n`\nexport const LIKE_COMMENT_MUTATION = gql`\n    mutation likeComment($postId: ID!, $commentId: ID!) {\n       likeComment(postId: $postId, commentId: $commentId) {\n         id\n         comments {\n         id\n         userInfo {\n            userId\n            name\n            username\n            profileImageURL\n         }\n         createdAt\n         body\n         likes {\n            username\n         }\n         dislikes {\n            username\n         }\n         likeCount\n         dislikeCount\n         }\n         commentCount\n       }\n    }\n`\nexport const DISLIKE_COMMENT_MUTATION = gql`\n    mutation dislikeComment($postId: ID!, $commentId: ID!) {\n       dislikeComment(postId: $postId, commentId: $commentId) {\n         id\n         comments {\n         id\n         userInfo {\n            userId\n            name\n            username\n            profileImageURL\n         }\n         createdAt\n         body\n         likes {\n            username\n         }\n         dislikes {\n            username\n         }\n         likeCount\n         dislikeCount\n         }\n         commentCount\n       }\n    }\n`\nexport const DELETE_USER_MUTATION = gql`\n   mutation {\n      deleteUser \n   }\n`\nexport const GET_FOLLOWING_POSTS_QUERY = gql`\n   query getFollowingPosts {\n      getFollowingPosts {\n      id\n      userInfo {\n        userId\n        name\n        username\n        houseName\n        profileImageURL\n      }\n      body\n      imageURL\n      createdAt\n      likes {\n          username\n      }\n      dislikes {\n         username\n      }\n      comments {\n         userInfo {\n            username\n         }\n      }\n      likeCount\n      dislikeCount\n      commentCount\n   }\n}\n`","import React from 'react'\nimport { useMutation } from '@apollo/client'\nimport { useHistory } from 'react-router-dom'\n\nimport { DELETE_POST_MUTATION } from '../../utilities/gqlTags'\n\nexport const DeletePostButton = ({ user, post }) => {\n    const history = useHistory();\n    const [deletePost] = useMutation(DELETE_POST_MUTATION, { update() { window.location.reload(); } });\n    const deletePostHandler = () => {\n        if (user) {\n            deletePost({ variables: { postId: post.id } });\n            return;\n        }\n        history.push(\"/login\");\n    }\n    return (\n        <> <i onClick={deletePostHandler} className=\"far fa-trash-alt metric-icon\"></i> </>\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { useHistory } from 'react-router-dom'\n\nimport { LIKE_POST_MUTATION, LIKE_COMMENT_MUTATION } from '../../utilities/gqlTags'\n\nexport const LikePostButton = ({ user, post }) => {\n    const history = useHistory();\n    const [isLiked, setLiked] = useState(false);\n\n    useEffect(() => {\n        if (user) {\n            const flag = post.likes.some((l) => (l.username === user.username));\n            setLiked(flag);\n        }\n    }, [user, post.likes, post.dislikes])\n\n    const [likePost] = useMutation(LIKE_POST_MUTATION)\n    const likeHandler = () => {\n        if (!user) history.push(\"/login\");\n        likePost({ variables: { postId: post.id } });\n        setLiked(isLiked => (!isLiked));\n        return;\n    }\n\n    return (\n        <>\n            <i onClick={likeHandler} className={`fas fa-thumbs-up metric-icon ${isLiked ? \"liked\" : \"\"}`}></i>\n            <span className={`post-metric-text like ${isLiked ? \"liked\" : \"\"}`}>{post.likeCount}</span>\n        </>\n    )\n}\n\nexport const LikeCommentButton = ({ user, post, comment }) => {\n    const history = useHistory();\n    const [isLiked, setLiked] = useState(false);\n\n    useEffect(() => {\n        if (user) {\n            const flag = comment.likes.some((d) => (d.username === user.username));\n            setLiked(flag);\n        }\n    }, [user, comment.likes])\n\n    const [likeComment] = useMutation(LIKE_COMMENT_MUTATION);\n    const likeHandler = () => {\n        if (!user) history.push(\"/login\");\n        likeComment({ variables: { postId: post.id, commentId: comment.id } });\n        setLiked(isLiked => (!isLiked));\n        return;\n    }\n\n    return (\n        <>\n            <i onClick={likeHandler} className={`fas fa-thumbs-up metric-icon ${isLiked ? \"liked\" : \"\"}`}></i>\n            <span className={`post-metric-text like ${isLiked ? \"liked\" : \"\"}`}>{comment.likeCount}</span>\n        </>\n    )\n}","import React from 'react'\n\nimport '../../components/ProfilePage/ProfileTabs/ProfileTabs.css';\n\n// Custom Tab for HomePage\nexport const HomeHeaderTab = ({ iconCurrenlyClicked, thisIcon, iconClickHandler }) => {\n    const faIconClass = thisIcon === \"home\" ? \"fab fa-fort-awesome\" : (thisIcon === \"all\" ? \"fas fa-globe-europe\" : \"fas fa-users\")\n\n    return (\n        <>\n            <button className={`Header-Tabs ${thisIcon}-tab`} onClick={iconClickHandler} >\n                <i id={iconCurrenlyClicked === `${thisIcon}` ? `${thisIcon}-icon-active` : `${thisIcon}-icon`}\n                    className={`${faIconClass} Header-icon`}>\n                </i>\n                <div className={iconCurrenlyClicked === `${thisIcon}` ? `icon-text ${thisIcon} active` : \"icon-text\"}>\n                    {thisIcon}\n                </div>\n            </button>\n        </>\n    )\n}\n\n// Custom Tab for Profile Page\nexport const ProfileTab = ({ tabClicked, tabHandler, type }) => {\n    const iconName = () => {\n        switch (type) {\n            case \"posts\":\n                return <i className=\"fas fa-scroll\"></i>\n            case \"liked posts\":\n                return <i className=\"fas fa-heart\"></i>\n            case \"allegiances\":\n                return <i className=\"fas fa-handshake\"></i>\n            default:\n                return <i className=\"fas fa-flag\"></i>\n        }\n    }\n\n    return (\n        <>\n            <button\n                className={`profile-tab ${tabClicked === type ? \"active\" : \"\"} ${type}`}\n                onClick={tabHandler}\n            >\n                <div\n                    className={`profile-tab-contents ${tabClicked === type ? \"active\" : \"\"} ${type}`}>\n                    {iconName()}\n                    <p>{type}</p>\n                </div>\n            </button>\n        </>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { useHistory } from 'react-router-dom'\n\nimport { DISLIKE_POST_MUTATION, DISLIKE_COMMENT_MUTATION } from '../../utilities/gqlTags'\n\nexport const DislikePostButton = ({ user, post }) => {\n    const history = useHistory();\n    const [isDisliked, setDisliked] = useState(false);\n\n    useEffect(() => {\n        if (user) {\n            const flag = post.dislikes.some((d) => (d.username === user.username));\n            setDisliked(flag);\n        }\n    }, [user, post.likes, post.dislikes])\n\n    const [dislikePost] = useMutation(DISLIKE_POST_MUTATION);\n    const dislikeHandler = () => {\n        if (!user) history.push(\"/login\");\n        dislikePost({ variables: { postId: post.id } });\n        setDisliked(isDisliked => (!isDisliked));\n        return;\n    }\n\n    return (\n        <>\n            <i onClick={dislikeHandler} className={`fas fa-thumbs-down metric-icon ${isDisliked ? \"disliked\" : \"\"}`}></i>\n            <span className={`post-metric-text unlike ${isDisliked ? \"disliked\" : \"\"}`}>{post.dislikeCount}</span>\n        </>\n    )\n}\n\nexport const DislikeCommentButton = ({ user, post, comment }) => {\n    const history = useHistory();\n    const [isDisliked, setDisliked] = useState(false);\n\n    useEffect(() => {\n        if (user) {\n            const flag = comment.dislikes.some((d) => (d.username === user.username));\n            setDisliked(flag);\n        }\n    }, [user, comment.likes, comment.dislikes])\n\n    const [dislikeComment] = useMutation(DISLIKE_COMMENT_MUTATION);\n    const dislikeHandler = () => {\n        if (!user) history.push(\"/login\");\n        dislikeComment({ variables: { postId: post.id, commentId: comment.id } });\n        setDisliked(isDisliked => (!isDisliked));\n        return;\n    }\n\n    return (\n        <>\n            <i onClick={dislikeHandler} className={`fas fa-thumbs-down metric-icon ${isDisliked ? \"disliked\" : \"\"}`}></i>\n            <span className={`post-metric-text unlike ${isDisliked ? \"disliked\" : \"\"}`}>{comment.dislikeCount}</span>\n        </>\n    )\n}","import React, { useState, useEffect, useContext } from 'react'\nimport { useMutation } from '@apollo/client'\nimport { useHistory } from 'react-router-dom'\nimport { AuthContext } from '../../authentication/AuthContext'\n\nimport { FOLLOW_USER_MUTATION } from '../../utilities/gqlTags';\n\nexport const FollowButton = ({ user, type }) => {\n    const { loginOrRegister, data: userData } = useContext(AuthContext);\n    const history = useHistory();\n    const [isFollowing, setFollowing] = useState(false);\n\n    useEffect(() => {\n        if (user && userData) {\n            const flag = userData.following.some((f) => (f.username === user.username));\n            setFollowing(flag);\n        }\n    }, [user, userData])\n\n    const [followUser] = useMutation(FOLLOW_USER_MUTATION, {\n        update(_, { data: { followClicked: resultUserData } }) {\n            const updatedUser = { ...userData, ...resultUserData }\n            loginOrRegister(updatedUser);\n        },\n        variables: { userId: user.id }\n    })\n\n    const handleFollowClicked = () => {\n        !userData && history.push(\"/login\");\n        followUser(); setFollowing(!isFollowing);\n    }\n\n    return (\n        <>\n            <div className={`${type}-card-btn-container`}>\n                {!isFollowing ?\n                    <button\n                        onClick={handleFollowClicked}\n                        className={`user-card-follow-btn following ${type}`}\n                    >\n                        <i className=\"far fa-handshake\"></i>\n                        <p>Bend the Knee.</p>\n                    </button> :\n                    <button\n                        onClick={handleFollowClicked}\n                        className={`user-card-follow-btn not-following ${type}`}\n                    >\n                        <i className=\"fas fa-handshake-slash\"></i>\n                        <i id=\"prof-pg-not-follow\" className=\"fas fa-handshake\"></i>\n                        <p>Bent the Knee.</p>\n                    </button>\n                }\n            </div>\n        </>\n    )\n}","export default __webpack_public_path__ + \"static/media/default.8973ad91.jpg\";","import React, { useContext } from 'react'\n\nimport { AuthContext } from '../../authentication/AuthContext'\nimport { FollowButton } from '..';\n\nimport defaultUserPic from '../../images/default.jpg'\nimport '../../components/HomePage/SuggestView/SuggestView.css'\nimport '../../components/HomePage/SideView/SideView.css'\n\nexport const UserCard = ({ type, user, isCurrentUser }) => {\n    const followButton = (isCurrentUser === false) &&\n        <FollowButton user={user} type={type} />\n\n    const userBio = type === \"user-result\" &&\n        <span className={`${type}-card-user-bio`}>{user.bio}</span>\n\n    return (\n        <>\n            <div className={`${type}-card`}>\n                <div className={`${type}-image-container`}>\n                    <img\n                        className={`${type}-profile-img`}\n                        src={user.profileImageURL || defaultUserPic}\n                        alt=\"profile-img\" />\n                </div>\n                <div className={`${type}-card-details`}>\n                    <div className={`${type}-card-details-top`}>\n                        <h5>{user.name}</h5>\n                        <a href={`/users/${user.id}`} className={`${type}-card-details-top-username`}>{`@${user.username}`}</a>\n                    </div>\n                    <div className={`${type}-card-details-bottom`}>\n                        <a href={`/users/${user.id}`}>{`@${user.username}`}</a>\n                    </div>\n                    <div className={`${type}-card-house-details`}>\n                        <i id={`${type}-house-icon`} className=\"fas fa-bookmark\"></i>\n                        <span>{user.houseName ? `House ${user.houseName}` : \"No House\"}</span>\n                    </div>\n                    {user.bio && userBio}\n                </div>\n                {followButton}\n            </div>\n        </>\n    )\n}\n\n// List for displaying the User Cards\nexport const UserCardList = ({ type, cards }) => {\n    const { data: currentUser } = useContext(AuthContext);\n    return (\n        <>\n            {cards && cards.map((user) => {\n                return <UserCard key={user.id} type={type} user={user}\n                    isCurrentUser={currentUser ? user.username === currentUser.username : false}\n                />\n            })}\n        </>\n    )\n}","import React, { useContext } from 'react'\nimport { useHistory } from 'react-router'\nimport moment from 'moment'\n\nimport '../../components/HomePage/MainView/PostsView/PostsView.css';\nimport defaultUserPic from '../../images/default.jpg'\n\nimport { AuthContext } from '../../authentication/AuthContext'\nimport {\n    LikePostButton, DislikePostButton, CommentPostButton,\n    DeletePostButton\n} from '..'\n\nexport const PostCard = ({ post, type = \"\" }) => {\n    const { data: user } = useContext(AuthContext);\n    const history = useHistory();\n\n    const postClickedHandler = (e) => {\n        if ([\"post-card-container\", \"post-card-text\", \"time\",\n            \"profile-header-bottom-details\"].includes(e.target.classList[0])\n            && type !== \"post-page-card\") {\n            history.push(`/posts/${post.id}`);\n        }\n    }\n\n    return (\n        <div className={`Post-Card ${type}`}>\n            <div className=\"post-card-container\" onClick={postClickedHandler}>\n                <div className=\"post-card-header\">\n                    <div className=\"profile-img-container\">\n                        <img\n                            className=\"profile-img\"\n                            src={post.userInfo.profileImageURL || defaultUserPic}\n                            alt=\"profile-img\"\n                        />\n                    </div>\n                    <div className=\"profile-header-container\">\n                        <div className=\"profile-header-top-details\">\n                            <span className=\"name\">{post.userInfo.name}</span>\n                            <a href={`/users/${post.userInfo.userId}`} className=\"username\">{\"@\" + post.userInfo.username}</a>\n                            <span className=\"dot\">•</span>\n                            <span className=\"time\">{moment(post.createdAt).fromNow(true)}</span>\n                        </div>\n                        <div className=\"profile-header-bottom-details\">\n                            <i id=\"house-icon\" className=\"fas fa-bookmark\"></i>\n                            <span className=\"house-name\">{post.userInfo.houseName ? \"House \" + post.userInfo.houseName : \"No House\"}</span>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"post-card-details\">\n                    <div className=\"post-card-text\"> {post.body} </div>\n                    {post.imageURL &&\n                        <img className=\"post-img\" src={post.imageURL} alt=\"post-img\" />\n                    }\n                    <div className=\"post-card-metrics\">\n                        <div className=\"metrics-left\">\n                            <LikePostButton user={user} post={post} />\n                            <DislikePostButton user={user} post={post} />\n                        </div>\n                        <div className=\"metrics-right\">\n                            {type !== \"post-page-card\" &&\n                                <CommentPostButton user={user} post={post}\n                                    isCommented={user ? post.comments.some((c) => (c.userInfo.username === user.username)) : false}\n                                />}\n                            {(user && post.userInfo.username === user.username)\n                                && <DeletePostButton user={user} post={post} />}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}","import React, { useState, useContext } from 'react'\nimport { useMutation } from '@apollo/client'\nimport moment from 'moment'\n\nimport { DELETE_COMMENT_MUTATION } from '../../utilities/gqlTags'\nimport defaultUserPic from '../../images/default.jpg'\nimport { DislikeCommentButton, LikeCommentButton } from '..'\nimport { AuthContext } from '../../authentication/AuthContext'\n\nexport const CommentCard = ({ post, comment, commentClicked, optionsClickedHandler, deleteClicked }) => {\n    const { data: user } = useContext(AuthContext);\n\n    return (\n        <div>\n            <div className=\"Post-Card comment-card\">\n                <div className=\"post-card-container\" >\n                    <div className=\"post-card-header\">\n                        <div className=\"profile-img-container\">\n                            <img className=\"profile-img post-page\" alt=\"profile-img\"\n                                src={comment.userInfo.profileImageURL || defaultUserPic}\n                            />\n                        </div>\n                        <div className=\"profile-header-container\">\n                            <div className=\"profile-header-top-details\">\n                                <span className=\"name\">{comment.userInfo.name}</span>\n                                <a href={`/users/${comment.userInfo.userId}`} className=\"username\">{`@${comment.userInfo.username}`}</a>\n                                <span className=\"dot\">•</span>\n                                <span className=\"time\">{moment(comment.createdAt).fromNow(true)}</span>\n                                {user && ([comment.userInfo.username, post.userInfo.username].includes(user.username)) &&\n                                    <>\n                                        <span onClick={() => (optionsClickedHandler(comment.id))} className=\"dots-menu\">...</span>\n                                        {commentClicked === comment.id &&\n                                            <div className=\"modal options-box\">\n                                                <div>\n                                                    <button onClick={deleteClicked}>{comment.userInfo.username === user.username ? \"Delete your comment\" : \"Delete this user's comment\"}</button>\n                                                </div>\n                                            </div>\n                                        }\n                                    </>\n                                }\n                            </div>\n                            <div className=\"profile-header-bottom-details\">\n                                <i id=\"house-icon\" className=\"fas fa-bookmark\"></i>\n                                <span className=\"house-name\">{comment.userInfo.houseName ? `House ${comment.userInfo.houseName}` : \"No House\"}</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"post-card-details post-page\">\n                        <div className=\"post-card-text post-page\"> {comment.body} </div>\n                        <div className=\"post-card-metrics\">\n                            <div className=\"metrics-left\">\n                                <LikeCommentButton user={user} post={post} comment={comment} />\n                                <DislikeCommentButton user={user} post={post} comment={comment} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div >\n    )\n}\n\n// Used for listing the Comments\nexport const CommentCardList = ({ comments, post }) => {\n    const [commentClicked, setCommentClicked] = useState(\"\");\n    const [deleteComment] = useMutation(DELETE_COMMENT_MUTATION)\n\n    return (\n        <>\n            {comments && comments.map((comment) => {\n                return <CommentCard\n                    key={comment.id}\n                    post={post}\n                    comment={comment}\n                    commentClicked={commentClicked}\n                    optionsClickedHandler={(commentId) => {\n                        if (commentId === commentClicked) { setCommentClicked(\"\"); return; }\n                        setCommentClicked(commentId)\n                    }}\n                    deleteClicked={() => {\n                        setCommentClicked(\"\");\n                        deleteComment({ variables: { postId: post.id, commentId: commentClicked } })\n                    }}\n                />\n            })}\n        </>\n    )\n}","import React from 'react'\n\n// Used in conjuction with posting posts, editing profile and banner images, useForm is used\nexport const ImageInputForm = ({ title, property, values, onChangeHandler }) => {\n    return (\n        <>\n            <label htmlFor={`file-upload-${property}`} className=\"file-upload-label edit-profile\">\n                <p>{`Change ${title}`}</p>\n                <span className=\"post-card post-metric-text\">\n                    {values[property] && (values[property].length > 0 && \"Replace Image\")}\n                </span>\n            </label>\n            <input\n                className={`post-card bottom-form ${property} edit-profile`}\n                id={`file-upload-${property}`}\n                type=\"file\"\n                onChange={onChangeHandler}\n                accept=\"image/*\"\n            />\n            {values[property] && <span className=\"post-card post-metric-text file-name edit-profile\">\n                {values[property].name}\n            </span>}\n        </>\n    )\n}\n","import React from 'react'\nimport defaultUserPic from '../../images/default.jpg'\n\n// For posting posts, utilizes the useForm hook\nexport const PostCardForm = ({ user, values, onSubmitHandler, onChangeHandler, resetValues }) => {\n    return (\n        <div className=\"post-card-form\">\n            <div className=\"post-card-form-container\">\n                <div className=\"post-card-form-top\">\n                    <div className=\"post-card-img-container\">\n                        <img src={user.profileImageURL || defaultUserPic} className=\"profile-img\" alt=\"profile-img\"></img>\n                    </div>\n                    <div className=\"post-card-details-container\">\n                        <div className=\"post-card-form profile-header-top-details\">\n                            <span className=\"name\">{user.name}</span>\n                            <a href={`/users/${user.id}`} className=\"username\">{\"@\" + user.username}</a>\n                        </div>\n                        <div className=\"post-card-details-body\">\n                            <input\n                                className=\"post-card sign-form-input body\"\n                                placeholder=\"Greetings Westoros!\"\n                                onChange={onChangeHandler}\n                                value={values.body}\n                            />\n                            <button onClick={onSubmitHandler} disabled={values.body === \"\" ? true : false}>\n                                <i className={`fas fa-feather-alt metric-icon ${values.body === \"\" ? \"disabled\" : \"\"}`}></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"post-card-form-bottom\">\n                    {values.imageURL && <span className=\"post-card post-metric-text file-name\">\n                        {values.imageURL.name}\n                    </span>}\n                    <label htmlFor=\"file-upload\" className=\"file-upload-label\">\n                        <i className=\"fas fa-image post-card metric-icon\"></i>\n                        <span className=\"post-card post-metric-text\">\n                            {values.imageURL === \"\" ? \"Add an Image\" : \"Replace Image\"}\n                        </span>\n                    </label>\n                    {values.imageURL &&\n                        <span className=\"post-card post-metric-text cancel\"\n                            onClick={resetValues}> Remove Image\n                        </span>}\n                    <input\n                        className=\"post-card bottom-form imageURL\" id=\"file-upload\" type=\"file\"\n                        onChange={onChangeHandler}\n                        accept=\"image/*\"\n                    />\n                </div>\n            </div>\n        </div >\n    )\n}","import React from 'react'\nimport '../../components/HomePage/MainView/HeaderView/HeaderView.css';\n\n// Search Forms for the Search Post/User functionality in HomeView\nexport const SearchForm = ({ searchText, searchInputHandler, tabType }) => {\n    const searchType = (tabType === \"home\" || tabType === \"all\") ? \"Quest for posts.\" : \"Quest for westerlings.\"\n\n    return (\n        <div>\n            <button className=\"HomeView-search-button\">\n                <i id=\"search-icon\" className=\"fas fa-search\"></i>\n            </button>\n            <input\n                className=\"search-bar HomeView\"\n                onChange={searchInputHandler}\n                value={searchText}\n                type=\"text\"\n                placeholder={searchType}\n                spellCheck=\"false\"\n            />\n        </div>\n    )\n}","import React from 'react'\n\n// InputForms for Registers and Login Views, useForm hook is used\nexport const SignForm = ({ textValue, inputHandler, title = \"\", type = \"\", errors, placeholder }) => {\n    const isPassword = title.includes(\"Password\");\n\n    return (\n        <div className={`sign-form-container ${type}`}>\n            <h3 className={`sign-form-title ${type}`}>\n                {title}\n            </h3>\n            <form>\n                <input\n                    className={`sign-form-input ${type} ${errors ? \"errors\" : \"\"}`}\n                    type={isPassword ? \"password\" : \"text\"}\n                    value={textValue}\n                    onChange={inputHandler}\n                    placeholder={placeholder}\n                    spellCheck=\"false\"\n                >\n                </input>\n            </form>\n        </div>\n    )\n}","import React from 'react'\nimport defaultUserPic from '../../images/default.jpg'\n\n// For posting comments, useForm is used\nexport const CommentCardForm = ({ user, values, onSubmitHandler, onChangeHandler }) => {\n    return (\n        <div className=\"post-card-form comment-form\">\n            <div className=\"post-card-form-container comment-form\">\n                <div className=\"post-card-form-top\">\n                    <div className=\"post-card-img-container\">\n                        <img src={user.profileImageURL || defaultUserPic} className=\"profile-img\" alt=\"profile-img\"></img>\n                    </div>\n                    <div className=\"post-card-details-container\">\n                        <div className=\"post-card-form profile-header-top-details\">\n                            <span className=\"name\">{user.name}</span>\n                            <a href={`/users/${user.id}`} className=\"username\">{\"@\" + user.username}</a>\n                        </div>\n                        <div className=\"post-card-details-body\">\n                            <input\n                                className=\"post-card sign-form-input body\"\n                                placeholder=\"Aye m'lord! A glorious post!\"\n                                onChange={onChangeHandler}\n                                value={values.body}\n                            />\n                            <button onClick={onSubmitHandler} disabled={values.body === \"\" ? true : false}>\n                                <i className={`fas fa-feather-alt metric-icon ${values.body === \"\" ? \"disabled\" : \"\"}`}></i>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div >\n    )\n}\n\n","import React from 'react'\nimport './HeaderView.css';\nimport { HomeHeaderTab, SearchForm } from '../../../../elements'\n\n// Displays the tabs & the search bar\nconst HeaderView = ({ iconClicked, iconClickHandler, searchText, searchInputHandler }) => {\n    const highlighterType = iconClicked === \"home\" ? \"home\" : (iconClicked === \"all\" ? \"all\" : \"westerlings\");\n\n    return (\n        <>\n            <div className=\"Header\">\n                <div className=\"Header-Left\">\n                    <HomeHeaderTab\n                        iconCurrenlyClicked={iconClicked}\n                        thisIcon=\"home\"\n                        iconClickHandler={iconClickHandler}\n                    />\n                    <HomeHeaderTab\n                        iconCurrenlyClicked={iconClicked}\n                        thisIcon=\"all\"\n                        iconClickHandler={iconClickHandler}\n                    />\n                    <HomeHeaderTab\n                        iconCurrenlyClicked={iconClicked}\n                        thisIcon=\"westerlings\"\n                        iconClickHandler={iconClickHandler}\n                    />\n                    <div className={`tab-higlighter ${highlighterType}`}>\n                    </div>\n                </div>\n                <div className=\"Header-Right\">\n                    <SearchForm\n                        searchText={searchText}\n                        searchInputHandler={searchInputHandler}\n                        tabType={iconClicked}\n                    />\n                </div>\n            </div>\n        </>\n    )\n}\nexport default HeaderView;","import { useState } from 'react'\n\n// custom hook for handling form functionality w/ images\n// used for editing account details, posting posts and comments\nconst useForm = (callback, initialState = {}) => {\n    const [values, setValues] = useState(initialState);\n\n    const onChangeHandler = (e) => {\n        if ([\"imageURL\", \"profileImageURL\", \"bannerURL\"].includes(e.target.classList[2])) {\n            if (e.target.files[0]) {\n                setValues({ ...values, [e.target.classList[2]]: e.target.files[0] });\n                return;\n            }\n            return;\n        }\n        setValues({ ...values, [e.target.classList[2]]: e.target.value });\n    }\n    const resetValues = (e) => {\n        if (e && e.target.classList[2] === \"cancel\") {\n            setValues({ ...values, imageURL: \"\" });\n            return;\n        }\n        setValues({ ...values, ...initialState });\n    }\n    const onSubmitHandler = (e) => {\n        e.preventDefault();\n        callback();\n    };\n\n    return {\n        onChangeHandler,\n        onSubmitHandler,\n        resetValues,\n        values\n    }\n}\n\nexport default useForm","import React from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport useForm from '../../../../utilities/useForm'\nimport { UPLOAD_POST_MUTATION } from '../../../../utilities/gqlTags'\nimport { PostCard, PostCardForm } from '../../../../elements'\n\n// Displays posts for both 'all' and 'home' users + PostForm (for posting posts)\nconst PostsView = ({ iconClicked, followingPosts, posts, user, isFollowingPostsEmpty }) => {\n    const callback = () => uploadImage();\n    const { onChangeHandler, onSubmitHandler, values, resetValues } = useForm(callback, {\n        body: \"\",\n        imageURL: \"\"\n    });\n\n    const [uploadPost] = useMutation(UPLOAD_POST_MUTATION, { update() { window.location.reload(); } })\n    const uploadImage = () => {\n        if (values.imageURL === \"\") {\n            uploadPost({ variables: { body: values.body } })\n            return;\n        }\n        const data = new FormData(); // appload imagen, get URL to store in DB\n        data.append(\"file\", values.imageURL);\n        data.append(\"upload_preset\", \"twitter-clone-react\");\n        data.append(\"cloud_name\", \"kyle-twitter-clone\");\n        fetch(\"https://api.cloudinary.com/v1_1/kyle-twitter-clone/image/upload\", {\n            method: \"post\",\n            body: data\n        })\n            .then(res => res.json())\n            .then(data => uploadPost({ variables: { body: values.body, imageURL: data.url } }))\n            .catch(error => console.log(error))\n    }\n\n    return (\n        <div className=\"PostsView\">\n            {(iconClicked === \"home\" && user) &&\n                <PostCardForm user={user} values={values} onSubmitHandler={onSubmitHandler}\n                    onChangeHandler={onChangeHandler} resetValues={resetValues} />}\n            {((!user || (iconClicked === \"all\"))) && (posts) && posts.map((post) => <PostCard key={post.id} post={post} />)}\n            {((user) && (iconClicked === \"home\")) && followingPosts && (followingPosts.map((post) => <PostCard key={post.id} post={post} />))}\n            {((user) && (iconClicked === \"home\")) && isFollowingPostsEmpty && <div className=\"empty-posts-view\"><p>Follow lords to see their content!</p></div>}\n\n        </div>\n    )\n}\nexport default PostsView;","import React from 'react'\n\nimport './UsersView.css'\nimport { UserCardList } from '../../../../elements'\n\nconst UsersView = ({ users }) => {\n    return (\n        <div className=\"home-users-view\">\n            {(users) && <UserCardList type=\"user-result\" cards={users} />}\n        </div>\n    )\n}\n\nexport default UsersView","import React, { useState, useContext } from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport './MainView.css';\nimport HeaderView from './HeaderView/HeaderView';\nimport PostsView from './PostsView/PostsView';\nimport UsersView from './UsersView/UsersView'\nimport { AuthContext } from '../../../authentication/AuthContext'\nimport { GET_POSTS_QUERY, GET_FOLLOWING_POSTS_QUERY } from '../../../utilities/gqlTags'\n\n// MainView that houses - HeaderTabs + SearchBar, PostsView, UsersView\n// This component rerenders everyime a user is followed, since curretUser's follow array is being updated\nconst MainView = ({ users }) => {\n    const { data } = useContext(AuthContext);\n    const [iconClicked, setIconClicked] = useState(\"home\");\n    const [searchText, setSearchText] = useState(\"\");\n\n    const { loading, data: { getPosts: posts } = {} } = useQuery(GET_POSTS_QUERY);\n    const { loading: loading2, data: { getFollowingPosts: followingPosts } = {} } = useQuery(GET_FOLLOWING_POSTS_QUERY);\n\n    const iconClickHandler = (e) => {\n        const tabText = e.currentTarget.textContent.toLowerCase();\n        setSearchText(\"\");\n        setIconClicked(tabText);\n    }\n    const searchInputHandler = (e) => {\n        setSearchText(e.target.value);\n    }\n\n    const filterUsers = (iconClicked === \"westerlings\") && users && users.filter((u) => {\n        const text = new RegExp(searchText, 'i');\n        return u.name.match(text) || u.houseName?.match(text) || u.username.match(text)\n    });\n    const filterFollowingPosts = ((data && iconClicked === \"home\") && followingPosts) && followingPosts.filter((f) => {\n        const text = new RegExp(searchText, 'i');\n        return f.userInfo.name.match(text) || f.userInfo.houseName?.match(text) ||\n            f.userInfo.username.match(text) || f.body.match(text)\n    });\n    const filterPosts = (data && iconClicked === \"all\") || (!data) && (posts) && posts.filter((p) => {\n        const text = new RegExp(searchText, 'i');\n        return p.userInfo.name.match(text) || p.userInfo.houseName?.match(text) ||\n            p.userInfo.username.match(text) || p.body.match(text)\n    });\n\n    return (\n        <div className=\"HomeBar\">\n            <HeaderView\n                iconClicked={iconClicked}\n                iconClickHandler={iconClickHandler}\n                searchText={searchText}\n                searchInputHandler={searchInputHandler}\n            />\n            {iconClicked !== \"westerlings\" ? (!loading && !loading2 && (\n                <PostsView\n                    iconClicked={iconClicked}\n                    followingPosts={data ? filterFollowingPosts : filterPosts}\n                    posts={filterPosts}\n                    user={data}\n                    isFollowingPostsEmpty={followingPosts?.length === 0}\n                />\n            )) : <UsersView users={filterUsers} searchText={searchText} />\n            }\n        </div>\n    )\n}\nexport default MainView;","// produces a list of randomized items from a given array\n// uses random picking instead of shuffling to account for large # of users\nconst getRandomList = (array, max) => {\n    if (!array) return [];\n    const randomItems = [];\n    let n = array.length;\n\n    while (n !== randomItems.length && randomItems.length < max) {\n        const index = Math.floor(Math.random() * n);\n        const selectedUser = array[index];\n        const isChosen = randomItems.some((u) => (u.username === selectedUser.username));\n        if (!isChosen) {\n            randomItems.push(selectedUser);\n        }\n    }\n\n    return randomItems;\n}\nexport default getRandomList;","import React, { useContext } from 'react'\n\nimport { UserCardList } from '../../../elements'\nimport getRandomList from '../../../utilities/getRandomList'\nimport { AuthContext } from '../../../authentication/AuthContext'\n\nimport defaultUserPic from '../../../images/default.jpg'\nimport './SuggestView.css'\n\nconst SuggestView = ({ users }) => {\n    const { data: userData } = useContext(AuthContext);\n    const getWesterlings = () => {\n        if (!users) return;\n        const randomUsers = getRandomList(users, 7);\n        return <UserCardList type=\"suggestion\" cards={randomUsers} />;\n    }\n\n    const getUserSuggestions = () => {\n        if (!users || !userData) return;\n        const updatedUsers = users.filter((u) => {\n            const isFollowing = userData.following.some((f) => f.username === u.username);\n            return !isFollowing && u.username !== userData.username;\n        });\n        if (updatedUsers.length === 0) {\n            return <div className=\"stat-list-divider\">Wow! You are allies with everyone.</div>\n        }\n        const randomUsers = getRandomList(updatedUsers, 7);\n        return <UserCardList type=\"suggestion\" cards={randomUsers} />;\n    }\n\n    const topRightHeader = userData ? <> <a href={`/users/${userData.id}`}>{userData.name}</a>\n        <img className=\"profile-img suggestion-header\"\n            src={userData.profileImageURL || defaultUserPic} alt=\"user-profile\" /> </> :\n        <a href=\"/register\" className=\"suggest-header-register\">Register</a>\n\n    return (\n        <div className=\"suggest-view-container\">\n            <div className=\"suggest-view-header\"> {topRightHeader} </div>\n            <div className=\"suggestions-container\">\n                <span className=\"suggestions-title\">{userData ? \"Possible Allegiances\" : \"Westerlings\"}</span>\n                <div className=\"suggestions-list\">\n                    {userData ? getUserSuggestions() : getWesterlings()}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SuggestView;","import React, { useState, useContext } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { AuthContext } from '../../../authentication/AuthContext'\n\n// The 'triple-dot' options menu components - users can logout, or view profile\nconst Options = ({ user }) => {\n    const { logout } = useContext(AuthContext);\n    const history = useHistory();\n    const [isOptionClicked, setOptionClicked] = useState(false);\n    const handleLogOut = () => { logout(); window.location.reload(); }\n\n    return (\n        <div>\n            <button onClick={() => (setOptionClicked(!isOptionClicked))}> ••• </button>\n            <div className=\"modal\" style={isOptionClicked ? { display: 'block' } : { display: 'none' }}>\n                <div><button onClick={() => { history.push(`users/${user.id}`) }}>View Profile</button></div>\n                <div><button onClick={handleLogOut}>Log Out</button></div>\n            </div>\n        </div>\n    )\n}\n\nexport default Options\n","import React from 'react'\n\nimport { UserCardList } from '../../../elements'\nimport Options from './Options'\nimport defaultUserPic from '../../../images/default.jpg'\n\n// displays current user's data\nconst UserPreview = ({ user, setIsSideViewPressed, isBannermenClicked, setIsBannermenClicked, followers, following }) => {\n    const followerList = (!followers || followers.length !== 0) ? <UserCardList type=\"side-view\" cards={followers} /> :\n        <div className=\"stat-list-divider\">No bannermen.</div>\n    const followingList = (!following || following.length !== 0) ? <UserCardList type=\"side-view\" cards={following} /> :\n        <div className=\"stat-list-divider\">No alliances.</div>\n\n    return (\n        <>\n            <div className=\"side-view-details\"> <Options user={user} /> </div>\n            <button className=\"side-view-toggle-button-left\" onClick={setIsSideViewPressed}>\n                <i className=\"fas fa-angle-double-left\"></i>\n            </button>\n            <div className=\"Side-view-top\">\n                <div className=\"side-view-profile-details\">\n                    <img\n                        className=\"side-view-profile-img\"\n                        src={user.profileImageURL || defaultUserPic}\n                        alt=\"side-view-profile-img\"></img>\n                    <h4>{user.name}</h4>\n                    <h5>{\"@\" + user.username}</h5>\n                </div>\n                <div className=\"side-view-profile-subtext\">\n                    <i id=\"side-view-house-icon-top\" className=\"fas fa-bookmark\"></i>\n                    <p className=\"house-text\">{user.houseName ? \"House \" + user.houseName : \"No House\"}</p>\n                    <i id=\"pin-icon\" className=\"fas fa-map-pin\"></i>\n                    <p className=\"location-text\">{user.location || \"None\"}</p>\n                </div>\n                <div className=\"side-view-divider\"></div>\n                <div className=\"side-view-profile-stats\">\n                    <div className=\"allegiances\">\n                        <h3>Allegiances</h3>\n                        <h5>{user.followingCount}</h5>\n                    </div>\n                    <div className=\"bannermen\">\n                        <h3>Bannermen</h3>\n                        <h5>{user.followerCount}</h5>\n                    </div>\n                </div>\n            </div>\n            <div className=\"Side-view-bottom\">\n                <div className=\"side-view-tabs\">\n                    <button\n                        className={isBannermenClicked ? \"bannermen-tab clicked\" : \"bannermen-tab\"}\n                        onClick={() => (setIsBannermenClicked(true))}\n                    >\n                        Bannermen\n                    </button>\n                    <button\n                        className={isBannermenClicked ? \"allegiances-tab\" : \"allegiances-tab clicked\"}\n                        onClick={() => (setIsBannermenClicked(false))}\n                    >\n                        Allegiances\n                    </button>\n                    <div className=\"side-view-stat-list\">\n                        {isBannermenClicked ? followerList : followingList}\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\nexport default UserPreview","import React, { useState, useContext } from 'react'\nimport { useMutation } from '@apollo/client'\n\nimport { SignForm, Button, AppDetails, ErrorDetails } from '../../../elements'\nimport { LOGIN_USER_MUTATION } from '../../../utilities/gqlTags'\nimport { AuthContext } from '../../../authentication/AuthContext'\nimport useForm from '../../../utilities/useForm'\n\n// an additional login component for the Home Page\nconst LogInPreview = () => {\n    const [errors, setErrors] = useState({});\n    const { loginOrRegister } = useContext(AuthContext);\n    const { onChangeHandler, onSubmitHandler, values } = useForm(callback, {\n        username: '',\n        password: '',\n    })\n\n    const [loginUser, { loading }] = useMutation(LOGIN_USER_MUTATION, {\n        update(_, { data: { login: userData } }) {\n            loginOrRegister(userData);\n            window.location.reload();\n        },\n        onError(err) {\n            if (!err.graphQLErrors[0]) return;\n            const errorsObject = { ...err.graphQLErrors[0].extensions.exception.errors };\n            setErrors({ ...errorsObject });\n        },\n        variables: values\n    })\n    function callback() { loginUser(); }\n\n    return (\n        <div className=\"login-side-preview-container\">\n            <div className=\"login-side-logo\">\n                <h1> Quillio </h1>\n                <i className=\"fas fa-feather-alt\"></i>\n            </div>\n            <p className=\"login-description\">\n                Log in or register and become a part of the largest online social\n                media community of the 7 kingdoms of Westoros!\n            </p>\n            <div className=\"login-inputs-container\">\n                <SignForm\n                    textValue={values.username}\n                    inputHandler={onChangeHandler}\n                    title={\"Username\"}\n                    type=\"login-in-preview username\"\n                    errors={errors.username ? true : false}\n                />\n                <SignForm textValue={values.password}\n                    inputHandler={onChangeHandler}\n                    title={\"Password\"}\n                    type=\"login-in-preview password\"\n                    errors={errors.password ? true : false}\n                />\n            </div>\n            <div className=\"login-side-btn-container\">\n                <Button text={\"Login!\"}\n                    type={`log-in-preview ${loading ? \"loading\" : \"\"}`}\n                    buttonHandler={onSubmitHandler}\n                />\n            </div>\n            <a href=\"/register\">\n                <p className=\"login-signup-description\"> Don’t have an account? Sign Up! </p>\n            </a>\n            <a href=\"/login\">\n                <p className=\"login-signup-description small\"> You are not logged in. Log in or sign up! </p>\n            </a>\n            <div className=\"login-in-preview-error-display\">\n                <ErrorDetails type=\"log-in-preview\" errors={errors} />\n            </div>\n            <div className=\"login-bottom-details-container\">\n                <AppDetails type=\"log-in-view\" />\n            </div>\n        </div>\n    )\n}\n\nexport default LogInPreview","import { useState } from 'react'\n\nimport UserPreview from './UserPreview'\nimport LogInPreview from './LogInPreview'\n\nimport \"./SideView.css\"\n\n// Side view component - for Login and view Current User Profile\nconst SideView = ({ setIsSideViewPressed, userData, followers, following }) => {\n    const [isBannermenClicked, setIsBannermenClicked] = useState(true);\n\n    return (\n        <>\n            <div className=\"side-view-container\">\n                {userData ? <UserPreview\n                    user={userData}\n                    setIsSideViewPressed={setIsSideViewPressed}\n                    isBannermenClicked={isBannermenClicked}\n                    setIsBannermenClicked={setIsBannermenClicked}\n                    followers={followers} following={following}\n\n                /> : <LogInPreview />}\n            </div>\n        </>\n    )\n}\n\nexport default SideView;","import React, { useState } from 'react'\nimport SideView from './SideView/SideView'\n\n// Separate component to handle state management of side view state, prevent rerender of GET_USERS\nconst LeftSideView = ({ userData, followers, following }) => {\n    const [isSideViewPressed, setIsSideViewPressed] = useState(false);\n\n    return (\n        <>\n            <div className={isSideViewPressed ? \"Sidebar clicked\" : \"Sidebar\"}>\n                <SideView\n                    setIsSideViewPressed={() => { setIsSideViewPressed(!isSideViewPressed) }}\n                    userData={userData}\n                    followers={followers} following={following}\n                />\n            </div>\n            <button onClick={() => { setIsSideViewPressed(!isSideViewPressed) }} className={isSideViewPressed ? \"side-view-toggle-button-right clicked\" : \"side-view-toggle-button-right\"}>\n                <i className=\"fas fa-angle-double-right\"></i>\n            </button>\n        </>\n    )\n}\n\nexport default LeftSideView\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport './HomePage.css'\nimport MainView from '../../components/HomePage/MainView'\nimport SuggestView from '../../components/HomePage/SuggestView'\nimport LeftSideView from '../../components/HomePage/LeftSideView'\n\nimport getRandomList from '../../utilities/getRandomList'\nimport { AuthContext } from '../../authentication/AuthContext'\nimport { GET_USERS_QUERY } from '../../utilities/gqlTags'\n\n// HomePage has 3 Parts\n// 1. Left Side View - Login, Profile Preview\n// 2. Main View - PostsView, UsersView\n// 3. Right User Suggestions - UserSuggestions\n\nconst HomePage = () => {\n    const { data: { getUsers: users } = {} } = useQuery(GET_USERS_QUERY);\n    const { data: userData } = useContext(AuthContext);\n\n    const getBannermenList = () => {\n        const randomUsers = getRandomList(userData.followers, 5);\n        return randomUsers;\n    }\n    const getAllegiancesList = () => {\n        const randomUsers = getRandomList(userData.following, 5);\n        return randomUsers;\n    }\n\n    return (\n        <div className=\"Home-Page\">\n            <LeftSideView\n                userData={userData}\n                followers={userData && getBannermenList()}\n                following={userData && getAllegiancesList()}\n            />\n            <div className=\"Right\">\n                <div className=\"Home\">\n                    <MainView users={users} />\n                </div>\n                <div className=\"SuggestBar\">\n                    <SuggestView users={users} />\n                </div>\n            </div>\n        </ div >\n    );\n}\n\nexport default HomePage","import React from 'react'\n\nimport './TabDetails.css'\nimport { PostCard, UserCardList } from '../../../elements'\n\n// Used to display certain data depending on which tab is clicked\nconst TabDetails = ({ tabClicked, user, userPosts, likedPosts }) => {\n    return (\n        <div className=\"profile-details-list\">\n            {(userPosts && tabClicked === \"posts\") &&\n                userPosts.map((post) => <PostCard key={post.id} post={post} />)}\n            {(likedPosts && tabClicked === \"liked posts\") &&\n                likedPosts.map((post) => <PostCard key={post.id} post={post} />)}\n            {(user && tabClicked === \"allegiances\") && <UserCardList type=\"user-result\" cards={user.following} />}\n            {(user && tabClicked === \"bannermen\") && <UserCardList type=\"user-result\" cards={user.followers} />}\n        </div>\n    )\n}\n\nexport default TabDetails","import React from 'react'\nimport './ProfileTabs.css'\n\nimport { ProfileTab } from '../../../elements'\n\nconst ProfileTabs = ({ tabClicked, tabHandler }) => {\n    return (\n        <div className=\"profile-tabs\">\n            <ProfileTab\n                tabClicked={tabClicked}\n                tabHandler={tabHandler}\n                type=\"posts\"\n            />\n            <ProfileTab\n                tabClicked={tabClicked}\n                tabHandler={tabHandler}\n                type=\"liked posts\"\n            />\n            <ProfileTab\n                tabClicked={tabClicked}\n                tabHandler={tabHandler}\n                type=\"allegiances\"\n            />\n            <ProfileTab\n                tabClicked={tabClicked}\n                tabHandler={tabHandler}\n                type=\"bannermen\"\n            />\n        </div>\n    )\n}\nexport default ProfileTabs","export default __webpack_public_path__ + \"static/media/defaultBG.8455f20b.jpg\";","import React, { useContext } from 'react'\nimport moment from 'moment'\nimport './ProfileTopView.css'\n\nimport { AuthContext } from '../../../authentication/AuthContext'\nimport { FollowButton } from '../../../elements'\nimport defaultUserPic from '../../../images/default.jpg'\nimport defaultBG from '../../../images/defaultBG.jpg'\n\n// Displaying profile details in the profile page\nconst ProfileTopView = ({ user }) => {\n    const { user: currentUser } = useContext(AuthContext);\n    return (\n        <div className=\"profile-pg-top-view\">\n            <img\n                className=\"banner-image\"\n                src={user.bannerURL ? user.bannerURL : defaultBG}\n                alt=\"user\"\n            />\n            <div className=\"profile-pg-top-details\">\n                <div className=\"top-details-top\">\n                    <h2>{user.name}</h2>\n                    <div className=\"top-details-user-metrics\">\n                        <p>{user.followingCount}</p>\n                        <span id=\"allegiances\">Allegiances</span>\n                        <p>{user.followerCount}</p>\n                        <span>Bannermen</span>\n                    </div>\n                </div>\n                <span id=\"profile-pg-username\">{`@${user.username}`}</span>\n                <p id=\"profile-bio\">{user.bio ? user.bio : \"No bio...\"}</p>\n                <div className=\"top-details-bottom\">\n                    <i className=\"fas fa-bookmark top-view-detail\"></i>\n                    <span className=\"top-view-detail-text\">{`${user.houseName ? \"House \" + user.houseName : \"No House\"}`}</span>\n                    <i className=\"fas fa-map-pin top-view-detail\"></i>\n                    <span className=\"top-view-detail-text\">{`${user.location ? user.location : \"Nowhere\"}`}</span>\n                    <i className=\"far fa-calendar-alt top-view-detail\"></i>\n                    <span className=\"top-view-detail-text\">{`Joined ${moment(user.createdAt).format(\"MMM YYYY\")}`}</span>\n                </div>\n            </div>\n            <div className=\"profile-pg-user-img-container\">\n                <img\n                    id=\"profile-img\"\n                    src={user.profileImageURL ? user.profileImageURL : defaultUserPic}\n                    alt=\"banner\"\n                />\n                {(currentUser && currentUser.name !== user.name) && <FollowButton user={user} type=\"profile-page\" />}\n            </div>\n        </div>\n    )\n}\nexport default ProfileTopView","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\n\nimport TabDetails from '../TabDetails/TabDetails'\nimport ProfileTabs from '../ProfileTabs/ProfileTabs'\nimport ProfileTopView from '../ProfileTopView/ProfileTopView'\n\nimport { GET_USER_LIKED_POSTS_QUERY, GET_USER_POSTS_QUERY } from '../../../utilities/gqlTags'\n\n// Used to hold the main details for Profile Page\n// Separated this way to prevent rerenders for User Suggestions with mixing of states\nconst ProfileMainDetails = ({ user, userId }) => {\n    const [tabClicked, setTabClicked] = useState(\"posts\");\n    const tabHandler = (e) => setTabClicked(e.currentTarget.textContent.toLowerCase());\n\n    const { data: { getUserPosts: userPosts } = {} } = useQuery(GET_USER_POSTS_QUERY, {\n        variables: { userId: userId }\n    });\n    const { data: { getUserLikedPosts: likedPosts } = {} } = useQuery(GET_USER_LIKED_POSTS_QUERY, {\n        variables: { userId: userId }\n    });\n\n    return (\n        <>\n            <ProfileTopView user={user} />\n            <ProfileTabs tabClicked={tabClicked} tabHandler={tabHandler} />\n            <TabDetails\n                tabClicked={tabClicked}\n                user={user}\n                userPosts={userPosts}\n                likedPosts={likedPosts}\n            />\n        </>\n    )\n}\n\nexport default ProfileMainDetails\n","import React, { useContext } from 'react'\nimport moment from 'moment'\n\nimport './ProfileSideDetails.css'\nimport { AuthContext } from '../../../authentication/AuthContext'\nimport { UserCardList } from '../../../elements'\nimport getRandomList from '../../../utilities/getRandomList'\n\n// Side details - edit profile view & user suggestions for Profile Page\nconst ProfileSideDetails = ({ user = {}, users, onClickEdit }) => {\n    const { data: currentUser } = useContext(AuthContext);\n    const randomUsers = getRandomList(users, 6);\n\n    return (\n        <div className=\"profile-page-right\">\n            <div className=\"profile-side-details\"\n                style={currentUser && currentUser.username === user.username ? { display: \"block\" } : { display: \"none\" }}\n            >\n                <div className=\"profile-account-details\">\n                    <div className=\"header\">\n                        <h3>Account Details</h3>\n                        <button onClick={onClickEdit}>\n                            <p>Edit Profile</p>\n                            <i className=\"fas fa-edit\"></i>\n                        </button>\n                    </div>\n                    <div className=\"details-container\">\n                        <div className=\"detail\">\n                            <i className=\"far fa-envelope\"></i>\n                            <div className=\"detail-text\">\n                                <p className=\"title\">Email</p>\n                                <p className=\"subtitle\">{user.email}</p>\n                            </div>\n                        </div>\n                        <div className=\"detail\">\n                            <i className=\"far fa-calendar-alt\"></i>\n                            <div className=\"detail-text\">\n                                <p className=\"title\">Joined</p>\n                                <p className=\"subtitle\">{moment(user.createdAt).format(\"MMM YYYY\")}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"suggestions-list profile\">\n                <h3 className=\"suggestions-title-profile\">Westerlings</h3>\n                <div className=\"suggestions-list\">\n                    <UserCardList type=\"suggestion\" cards={(randomUsers)} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileSideDetails","// used for posts, profile images, banners\n// returns the address of the image in Cloudinary to be stored in DB\nexport const uploadImage = (dataURL) => {\n    const data = new FormData();\n    data.append(\"file\", dataURL);\n    data.append(\"upload_preset\", \"twitter-clone-react\");\n    data.append(\"cloud_name\", \"kyle-twitter-clone\");\n\n    return fetch(\"https://api.cloudinary.com/v1_1/kyle-twitter-clone/image/upload\", {\n        method: \"post\",\n        body: data\n    })\n        .then(res => res.json())\n        .then(data => { return data.url })\n        .catch(error => console.log(error))\n}","import React, { useState, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useMutation } from '@apollo/client'\nimport './EditProfile.css'\n\nimport useForm from '../../../utilities/useForm'\nimport { uploadImage } from '../../../utilities/uploadImage'\nimport { UPDATE_USER_INFO_MUTATION, DELETE_USER_MUTATION } from '../../../utilities/gqlTags'\nimport { SignForm, ImageInputForm, Button } from '../../../elements'\nimport { AuthContext } from '../../../authentication/AuthContext'\n\n// Users' account details can be edited & has delete user funcitonality\nconst EditProfile = ({ editProfile, onClickEdit }) => {\n    const history = useHistory();\n    const [isDeleteClicked, setDeleteClicked] = useState(false);\n    const { logout, loginOrRegister, data: userData } = useContext(AuthContext);\n    const { onChangeHandler, onSubmitHandler, resetValues, values } = useForm(callback, {\n        houseName: \"\",\n        location: \"\",\n        bio: \"\",\n        profileImageURL: \"\",\n        bannerURL: \"\"\n    })\n\n    const [updateProfileDetails] = useMutation(UPDATE_USER_INFO_MUTATION, {\n        update(_, { data: { updateProfileDetails: updatedUserData } }) {\n            loginOrRegister({ ...userData, ...updatedUserData });\n            window.location.reload();\n        }\n    });\n    const [deleteUser] = useMutation(DELETE_USER_MUTATION, {\n        update() { logout(); history.push(\"/\"); window.location.reload(); }\n    });\n\n    async function uploadChanges() {\n        let updatedValues = { ...values }\n        if (values.profileImageURL != null && values.profileImageURL !== \"\") {\n            const profileURL = await uploadImage(values.profileImageURL);\n            updatedValues = { ...updatedValues, profileImageURL: profileURL };\n        }\n        if (values.bannerURL != null && values.bannerURL !== \"\") {\n            const bannerURL = await uploadImage(values.bannerURL);\n            updatedValues = { ...updatedValues, bannerURL: bannerURL };\n        }\n        updateProfileDetails({ variables: updatedValues });\n    }\n\n    function callback() { uploadChanges() }  // arrow functions are not hoisted \n    const cancelButtonHandler = () => { onClickEdit(); resetValues(); }\n    const submitButtonHandler = (e) => { onSubmitHandler(e); onClickEdit(); resetValues(); }\n\n    return (\n        <div className={`edit-profile-page ${!editProfile && \"off\"}`} >\n            {isDeleteClicked &&\n                <div className=\"delete-user-modal\">\n                    <div className=\"delete-user-modal-box\">\n                        <h4>This action is permanent. Are you sure you want to delete you account m'lord?</h4>\n                        <div className=\"delete-user-modal-buttons\">\n                            <Button\n                                type=\"delete-modal cancel\"\n                                text=\"Never mind\"\n                                buttonHandler={() => (setDeleteClicked(false))}\n                            />\n                            <Button\n                                type=\"delete-modal delete-user\"\n                                text=\"Yes, I am sure.\"\n                                buttonHandler={() => (deleteUser())}\n                            /> d\n                        </div>\n                    </div>\n                </div>\n            }\n            <div className=\"edit-profile-modal\">\n                <div className=\"modal-container\">\n                    <h1>Edit Your Profile.</h1>\n                    <div className=\"sign-in-up-inputs-two-box profile-page-edit\">\n                        <SignForm\n                            title=\"House Name\"\n                            type=\"sign-in-up-page houseName profile\"\n                            textValue={values.houseName}\n                            inputHandler={onChangeHandler}\n                            placeholder=\"Targaryen\"\n                        />\n                        <SignForm\n                            title=\"Location\"\n                            type=\"sign-in-up-page location profile\"\n                            textValue={values.location}\n                            inputHandler={onChangeHandler}\n                            placeholder=\"Kings's Landing\"\n                        />\n                    </div>\n                    <SignForm\n                        title=\"Biography\"\n                        type=\"sign-in-up-page bio profile\"\n                        textValue={values.bio}\n                        inputHandler={onChangeHandler}\n                        placeholder=\"When you play the game of thrones, you win or you die.\"\n                    />\n                    <div className=\"profile-edits-bottom\">\n                        <ImageInputForm\n                            title=\"Profile Image\"\n                            property=\"profileImageURL\"\n                            onChangeHandler={onChangeHandler}\n                            values={values}\n                            resetValues={resetValues}\n                        />\n                        <ImageInputForm\n                            title=\"Banner Image\"\n                            property=\"bannerURL\"\n                            onChangeHandler={onChangeHandler}\n                            values={values}\n                            resetValues={resetValues}\n                        />\n                    </div>\n                    <button className=\"delete-user-button\" onClick={() => (setDeleteClicked(true))}>Delete your account</button>\n                    <div className=\"profile-edits-buttons\">\n                        <Button\n                            type=\"profile-edits cancel-changes\"\n                            text=\"Cancel\"\n                            buttonHandler={cancelButtonHandler}\n                        />\n                        <Button\n                            type=\"profile-edits save-changes\"\n                            text=\"Save\"\n                            buttonHandler={submitButtonHandler}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default EditProfile","import React, { useState, useEffect, useContext } from 'react'\nimport { useMutation, useQuery } from '@apollo/client'\nimport './ProfilePage.css'\n\nimport defaultUserPic from '../../images/default.jpg'\nimport { GET_USER_MUTATION, GET_USERS_QUERY } from '../../utilities/gqlTags'\n\nimport { AuthContext } from '../../authentication/AuthContext'\nimport ProfileMainDetails from '../../components/ProfilePage/ProfileMainDetails'\nimport ProfileSideDetails from '../../components/ProfilePage/ProfileSideDetails'\nimport EditProfile from '../../components/ProfilePage/EditProfile'\n\n// PostPage has 2 Parts\n// 1. Left Side Main View - Profile Details, Posts, LikedPost, Following/Unfollowing\n// 2. Right User Suggestions - UserSuggestions\n// These are separated to prevent rerenders with mixed states\n\nconst ProfilePage = ({ match }) => {\n    const { params: { userId } } = match;\n    const { data: currentUser } = useContext(AuthContext);\n    const [editProfile, setEditProfile] = useState(false);\n    useEffect(() => { getThisUser({ variables: { userId: userId } }); })\n\n    const [getThisUser, { data: { getUser: user } = {} }] = useMutation(GET_USER_MUTATION);\n    const { data: { getUsers: users } = {} } = useQuery(GET_USERS_QUERY);\n\n    const headerInfo = () => {\n        if (!currentUser) return <a href=\"/login\">Login</a>;\n        return <> <a href={`/users/${userId}`}>{currentUser && currentUser.name}</a>\n            <img src={currentUser?.profileImageURL || defaultUserPic} alt=\"user-profile\" /> </>\n    }\n\n    return (\n        <>\n            <div className=\"profile-page\">\n                <div className=\"profile-page-header\">\n                    <div className=\"login-side-logo profile\">\n                        <a href=\"/\"> Quillio </a>\n                        <i id=\"profile-logo\" className=\"fas fa-feather-alt profile\"></i>\n                    </div>\n                    <div className=\"profile-header-info\"> {headerInfo()} </div>\n                </div>\n                <div className=\"profile-page-container\">\n                    <div className=\"profile-page-left\">\n                        {user && <ProfileMainDetails user={user} userId={userId} />}\n                    </div>\n                    {user && <ProfileSideDetails user={user} users={users}\n                        onClickEdit={() => (setEditProfile(!editProfile))}\n                    />}\n                </div>\n            </div>\n            <EditProfile editProfile={editProfile} onClickEdit={() => (setEditProfile(!editProfile))} />\n        </>\n    )\n}\nexport default ProfilePage","import React, { useState, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport useForm from '../../utilities/useForm'\nimport { useMutation } from '@apollo/client'\nimport { AuthContext } from '../../authentication/AuthContext'\nimport { ErrorDetails, Button, SignForm } from '../../elements'\n\nimport { LOGIN_USER_MUTATION, REGISTER_USER_MUTATION } from '../../utilities/gqlTags'\n\n// The \"User-Input\" part of Login/Register Pages - accomadates both login/register functionality\nconst FormView = ({ type }) => {\n    const history = useHistory();\n    const [errors, setErrors] = useState({});\n    const { loginOrRegister } = useContext(AuthContext);\n    const { onChangeHandler, onSubmitHandler, values } = useForm(callback, {\n        name: '', username: '', email: '',\n        password: '', confirmPassword: ''\n    })\n\n    const [authenticateUser, { loading }] = useMutation(\n        type === \"login\" ? LOGIN_USER_MUTATION : REGISTER_USER_MUTATION, {\n        update(_, { data }) {\n            loginOrRegister(data[type]);  // data.login or data.register\n            if (type === \"login\") {\n                history.push(\"/\");\n                window.location.reload();\n                return;\n            }\n            history.push(`/users/${data.register.id}`)\n            window.location.reload();\n        },\n        onError(err) {\n            const errorsObject = { ...err.graphQLErrors[0]?.extensions.exception.errors };\n            setErrors({ ...errorsObject });\n        }\n    })\n    function callback() { authenticateUser({ variables: values }); }\n\n    const errorsDisplay =\n        <div className=\"sign-in-up-errors\">\n            <ErrorDetails type=\"log-in-view\" errors={errors} />\n        </div>\n\n    const loginView = <>\n        <div className=\"sign-in-up-inputs-container\">\n            <div className=\"sign-in-up-inputs-one-box\">\n                <SignForm\n                    title=\"Username\"\n                    type=\"sign-in-up-page username\"\n                    errors={errors.username ? true : false}\n                    textValue={values.username}\n                    inputHandler={onChangeHandler}\n                />\n                <SignForm\n                    title=\"Password\"\n                    type=\"sign-in-up-page password\"\n                    errors={errors.password ? true : false}\n                    textValue={values.password}\n                    inputHandler={onChangeHandler}\n                />\n            </div>\n            <div className=\"sign-in-un-button-container\">\n                <Button\n                    text={\"Login!\"}\n                    type={`sign-in-up-page ${loading ? \"loading\" : \"\"}`}\n                    buttonHandler={onSubmitHandler}\n                />\n            </div>\n        </div>\n        <div className=\"sign-in-up-bottom-info\">\n            <a href=\"/register\" className=\"sign-in-up-link\"> Don't have anccount yet? Sign up! </a>\n        </div>\n        {errorsDisplay}\n    </>\n\n    const registerView = <>\n        <div className=\"sign-in-up-inputs-container\">\n            <div className=\"sign-in-up-inputs-two-box\">\n                <SignForm\n                    title=\"Name\"\n                    type=\"sign-in-up-page name\"\n                    errors={errors.inputname ? true : false}\n                    textValue={values.name}\n                    inputHandler={onChangeHandler}\n                />\n                <SignForm\n                    title=\"Username\"\n                    type=\"sign-in-up-page username\"\n                    errors={errors.username ? true : false}\n                    textValue={values.username}\n                    inputHandler={onChangeHandler}\n                />\n            </div>\n            <div className=\"sign-in-up-inputs-one-box\">\n                <SignForm\n                    title=\"Email\"\n                    type=\"sign-in-up-page email\"\n                    errors={errors.email ? true : false}\n                    textValue={values.email}\n                    inputHandler={onChangeHandler}\n                />\n            </div>\n            <div className=\"sign-in-up-inputs-two-box\">\n                <SignForm\n                    title=\"Password\"\n                    type=\"sign-in-up-page password\"\n                    errors={errors.password ? true : false}\n                    textValue={values.password}\n                    inputHandler={onChangeHandler}\n                />\n                <SignForm\n                    title=\"Confirm Password\"\n                    type=\"sign-in-up-page confirmPassword\"\n                    errors={errors.confirmPassword ? true : false}\n                    textValue={values.confirmPassword}\n                    inputHandler={onChangeHandler}\n                />\n            </div>\n            <div className=\"sign-in-un-button-container\">\n                <Button\n                    text={\"Register!\"}\n                    type={`sign-in-up-page ${loading ? \"loading\" : \"\"}`}\n                    buttonHandler={onSubmitHandler}\n                />\n            </div>\n        </div>\n        <div className=\"sign-in-up-bottom-info\">\n            <a href=\"/login\" className=\"sign-in-up-link\"> Already have an account? Sign in! </a>\n        </div>\n        {errorsDisplay}\n    </>\n\n    return (<div> {type === \"login\" ? loginView : registerView} </div>)\n}\n\nexport default FormView","import React from 'react'\n\nimport './AuthPage.css'\nimport FormView from '../../components/AuthPage/FormView'\nimport { AppDetails, WestrosArtImage } from '../../elements'\n\n// The form part of the page is separated from the \"art\" portion to avoid image rerenders\nconst RegisterView = () => {\n\n    return (\n        <div className=\"Sign-In-Up-Page\">\n            <div className=\"sign-in-up-page-left\">\n                <div className=\"sign-in-up-page-title\">\n                    <h1> Quillio </h1> <i className=\"fas fa-feather-alt\"></i>\n                </div>\n                <div className=\"sign-in-up-inputs-outer-container\">\n                    <FormView type=\"register\" />\n                </div>\n                <AppDetails type=\"sign-in-up\" />\n            </div>\n            <div className=\"sign-in-up-page-right\">\n                <WestrosArtImage />\n            </div>\n        </div>\n    )\n}\n\nexport default RegisterView","import React from 'react'\n\nimport './AuthPage.css'\nimport FormView from '../../components/AuthPage/FormView'\nimport { AppDetails, WestrosArtImage } from '../../elements'\n\n// The form part of the page is separated from the \"art\" portion to avoid image rerenders\nconst LoginPage = () => {\n\n    return (\n        <div className=\"Sign-In-Up-Page\">\n            <div className=\"sign-in-up-page-left\">\n                <div className=\"sign-in-up-page-title\">\n                    <h1> Quillio </h1> <i className=\"fas fa-feather-alt\"></i>\n                </div>\n                <div className=\"sign-in-up-inputs-outer-container\">\n                    <FormView type=\"login\" />\n                </div>\n                <AppDetails type=\"sign-in-up\" />\n            </div>\n            <div className=\"sign-in-up-page-right\">\n                <WestrosArtImage />\n            </div>\n        </div>\n    )\n}\n\nexport default LoginPage","import React, { useContext } from 'react'\nimport './PostMainView.css'\nimport { useQuery, useMutation } from '@apollo/client'\n\nimport useForm from '../../utilities/useForm'\n\nimport { GET_POST_QUERY, CREATE_COMMENT_MUTATION } from '../../utilities/gqlTags'\nimport { PostCard, CommentCardForm, CommentCardList } from '../../elements'\nimport { AuthContext } from '../../authentication/AuthContext'\n\n// Displays a Post page - shows comments and upload comment form\nconst PostMainView = ({ postId }) => {\n    const { data: currentUser } = useContext(AuthContext);\n    const { values, onSubmitHandler, onChangeHandler } = useForm(callback, {\n        body: \"\"\n    })\n\n    function callback() { createComment({ variables: { postId: post.id, body: values.body } }); }\n    const { data: { getPost: post } = {} } = useQuery(GET_POST_QUERY, { variables: { postId } });\n    const [createComment] = useMutation(CREATE_COMMENT_MUTATION, { update() { values.body = \"\" } });\n\n    return (\n        <>\n            {post && <PostCard post={post} type=\"post-page-card\" />}\n            {currentUser && <CommentCardForm\n                user={currentUser}\n                values={values}\n                onSubmitHandler={onSubmitHandler}\n                onChangeHandler={onChangeHandler}\n            />}\n            {post && <div className=\"comment-count\">{`${post.commentCount} Comments`}</div>}\n            {post && <CommentCardList comments={post.comments} post={post} />}\n        </>\n    )\n}\n\nexport default PostMainView\n","import React, { useContext } from 'react'\nimport { useQuery } from '@apollo/client'\nimport './PostPage.css'\n\nimport PostMainView from '../../components/PostPage'\nimport getRandomList from '../../utilities/getRandomList'\nimport defaultUserPic from '../../images/default.jpg'\n\nimport { UserCardList } from '../../elements'\nimport { GET_USERS_QUERY } from '../../utilities/gqlTags'\nimport { AuthContext } from '../../authentication/AuthContext'\n\n// PostPage has 2 Parts\n// 1. Left Side Main View - Post, Comment Form, Comments\n// 2. Right User Suggestions - UserSuggestions\n\nconst PostPage = ({ match }) => {\n    const { data: currentUser } = useContext(AuthContext);\n    const { params: { postId } } = match;\n\n    const { data: { getUsers: users } = {} } = useQuery(GET_USERS_QUERY);\n\n    const headerInfo = () => {\n        if (!currentUser) return <a href=\"/login\">Login</a>;\n        return <> <a href={`/users/${currentUser.id}`}>{currentUser && currentUser.name}</a>\n            <img src={currentUser?.profileImageURL || defaultUserPic} alt=\"user-profile\" /> </>\n    }\n\n    return (\n        <div className=\"profile-page post-page\">\n            <div className=\"profile-page-header\">\n                <div className=\"login-side-logo profile\">\n                    <a href=\"/\"> Quillio </a>\n                    <i id=\"profile-logo\" className=\"fas fa-feather-alt profile\"></i>\n                </div>\n                <div className=\"profile-header-info\"> {headerInfo()} </div>\n            </div>\n            <div className=\"profile-page-container\">\n                <div className=\"profile-page-left post-page\">\n                    {<PostMainView postId={postId} />}\n                </div>\n                <div className=\"profile-page-right post-page\">\n                    <div className=\"suggestions-list profile\">\n                        <h3 className=\"suggestions-title-profile\">Westerlings</h3>\n                        <div className=\"suggestions-list\">\n                            <UserCardList type=\"suggestion\" cards={users && getRandomList(users, 6)} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default PostPage","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport './App.css';\n\nimport PrivateRoute from './utilities/PrivateRoute'\nimport HomePage from './pages/HomePage'\nimport ProfilePage from './pages/ProfilePage'\nimport RegisterPage from './pages/AuthPage/RegisterPage'\nimport LoginPage from './pages/AuthPage/LoginPage'\nimport PostPage from './pages/PostPage/PostPage';\n\nimport { AuthProvider } from './authentication/AuthContext'\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <div className=\"App\" >\n          <Switch>\n            <Route exact path=\"/\" component={HomePage} />\n            <Route exact path=\"/users/:userId\" component={ProfilePage} />\n            <Route exact path=\"/posts/:postId\" component={PostPage} />\n            <PrivateRoute exact path=\"/login\" component={LoginPage} />\n            <PrivateRoute exact path=\"/register\" component={RegisterPage} />\n          </Switch>\n        </div >\n      </Router>\n    </AuthProvider>\n  );\n}\nexport default App;","import { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink } from '@apollo/client'\nimport { setContext } from '@apollo/client/link/context';\nimport App from '../App'\n\n// connect to GQL server in Node\nconst httpLink = createHttpLink({\n    uri: 'http://localhost:5000'\n});\n\n// add the token (if there is one) to the header for the context in BackEnd\nconst authLink = setContext(() => {\n    const token = localStorage.getItem('jwtToken');\n    return {\n        headers: {\n            Authorization: token ? `Bearer ${token}` : ''\n        }\n    };\n});\n\n// initialize the actual client w/ cache (for preventing repeated API Calls)\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n});\n\nexport default (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n)","import ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ApolloProvider from './authentication/ApolloProvider'\n\nReactDOM.render(\n  ApolloProvider,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}